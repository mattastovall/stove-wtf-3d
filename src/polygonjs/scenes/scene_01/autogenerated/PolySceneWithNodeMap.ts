import { ParamValueSerializedTypeMap } from "@polygonjs/polygonjs/dist/src/engine/params/types/ParamValueSerializedTypeMap";

import { PolyScene } from "@polygonjs/polygonjs/dist/src/engine/scene/PolyScene";
// obj
import { CopNetworkObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/CopNetwork";
import { GeoObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/Geo";
import { PerspectiveCameraObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/PerspectiveCamera";
// cop
import { EnvMapCopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/cop/EnvMap";
import { ImageCopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/cop/Image";
import { ImageEXRCopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/cop/ImageEXR";
// sop
import { HemisphereLightSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/HemisphereLight";
import { MergeSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Merge";
import { PerspectiveCameraSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/PerspectiveCamera";
import { PolarTransformSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/PolarTransform";
import { SpotLightSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/SpotLight";

export class PolySceneWithNodeMap_scene_01 extends PolyScene {
  node(path: "/COP"): CopNetworkObjNode;
  node(path: "/COP/envMap"): EnvMapCopNode;
  node(path: "/COP/imageEnv"): ImageEXRCopNode;
  node(path: "/COP/image1"): ImageCopNode;
  node(path: "/lights"): GeoObjNode;
  node(path: "/lights/hemisphereLight1"): HemisphereLightSopNode;
  node(path: "/lights/spotLight1"): SpotLightSopNode;
  node(path: "/lights/polarTransform1"): PolarTransformSopNode;
  node(path: "/lights/merge1"): MergeSopNode;
  node(path: "/perspectiveCamera1"): PerspectiveCameraObjNode;
  node(
    path: "/perspectiveCamera1/perspectiveCamera1"
  ): PerspectiveCameraSopNode;
  node(
    path: string
  ): any /* we need any for now as otherwise an error occurs when adding plugins to the overloaded methods */ {
    return super.node(path);
  }
}

export interface PolySceneProps_scene_01 {
  "COP-envMap--useCameraRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--url"?: ParamValueSerializedTypeMap["string"];
  "COP-imageEnv--reload"?: ParamValueSerializedTypeMap["button"];
  "COP-imageEnv--tcolorSpace"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--colorSpace"?: ParamValueSerializedTypeMap["string"];
  "COP-imageEnv--tmapping"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--mapping"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--twrap"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--wrapS"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--wrapT"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--tminFilter"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--minFilter"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--tmagFilter"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--magFilter"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--tanisotropy"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--useRendererMaxAnisotropy"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--anisotropy"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--tflipY"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--flipY"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--ttransform"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--offset"?: ParamValueSerializedTypeMap["vector2"];
  "COP-imageEnv--offset-offsetx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--offset-offsety"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--offsetx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--offsety"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--repeat"?: ParamValueSerializedTypeMap["vector2"];
  "COP-imageEnv--repeat-repeatx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--repeat-repeaty"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--repeatx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--repeaty"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--rotation"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--center"?: ParamValueSerializedTypeMap["vector2"];
  "COP-imageEnv--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--center-centery"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--centerx"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--centery"?: ParamValueSerializedTypeMap["float"];
  "COP-imageEnv--tadvanced"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--tformat"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--format"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--ttype"?: ParamValueSerializedTypeMap["boolean"];
  "COP-imageEnv--type"?: ParamValueSerializedTypeMap["integer"];
  "COP-imageEnv--checkFileType"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--url"?: ParamValueSerializedTypeMap["string"];
  "COP-image1--reload"?: ParamValueSerializedTypeMap["button"];
  "COP-image1--tcolorSpace"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--colorSpace"?: ParamValueSerializedTypeMap["string"];
  "COP-image1--tmapping"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--mapping"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--twrap"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--wrapS"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--wrapT"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--tminFilter"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--minFilter"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--tmagFilter"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--magFilter"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--tanisotropy"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--useRendererMaxAnisotropy"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--anisotropy"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--tflipY"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--flipY"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--ttransform"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--offset"?: ParamValueSerializedTypeMap["vector2"];
  "COP-image1--offset-offsetx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--offset-offsety"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--offsetx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--offsety"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--repeat"?: ParamValueSerializedTypeMap["vector2"];
  "COP-image1--repeat-repeatx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--repeat-repeaty"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--repeatx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--repeaty"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--rotation"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--center"?: ParamValueSerializedTypeMap["vector2"];
  "COP-image1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--centerx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--centery"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--tadvanced"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--tformat"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--format"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--ttype"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--type"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--checkFileType"?: ParamValueSerializedTypeMap["boolean"];
  "lights--transform"?: ParamValueSerializedTypeMap["folder"];
  "lights--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "lights--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "lights--t"?: ParamValueSerializedTypeMap["vector3"];
  "lights--t-tx"?: ParamValueSerializedTypeMap["float"];
  "lights--t-ty"?: ParamValueSerializedTypeMap["float"];
  "lights--t-tz"?: ParamValueSerializedTypeMap["float"];
  "lights--tx"?: ParamValueSerializedTypeMap["float"];
  "lights--ty"?: ParamValueSerializedTypeMap["float"];
  "lights--tz"?: ParamValueSerializedTypeMap["float"];
  "lights--r"?: ParamValueSerializedTypeMap["vector3"];
  "lights--r-rx"?: ParamValueSerializedTypeMap["float"];
  "lights--r-ry"?: ParamValueSerializedTypeMap["float"];
  "lights--r-rz"?: ParamValueSerializedTypeMap["float"];
  "lights--rx"?: ParamValueSerializedTypeMap["float"];
  "lights--ry"?: ParamValueSerializedTypeMap["float"];
  "lights--rz"?: ParamValueSerializedTypeMap["float"];
  "lights--s"?: ParamValueSerializedTypeMap["vector3"];
  "lights--s-sx"?: ParamValueSerializedTypeMap["float"];
  "lights--s-sy"?: ParamValueSerializedTypeMap["float"];
  "lights--s-sz"?: ParamValueSerializedTypeMap["float"];
  "lights--sx"?: ParamValueSerializedTypeMap["float"];
  "lights--sy"?: ParamValueSerializedTypeMap["float"];
  "lights--sz"?: ParamValueSerializedTypeMap["float"];
  "lights--scale"?: ParamValueSerializedTypeMap["float"];
  "lights--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "lights--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "lights--display"?: ParamValueSerializedTypeMap["boolean"];
  "lights--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "lights--CAD"?: ParamValueSerializedTypeMap["folder"];
  "lights--CADLinearTolerance"?: ParamValueSerializedTypeMap["float"];
  "lights--CADAngularTolerance"?: ParamValueSerializedTypeMap["float"];
  "lights--CADCurveAbscissa"?: ParamValueSerializedTypeMap["float"];
  "lights--CADCurveTolerance"?: ParamValueSerializedTypeMap["float"];
  "lights--CADDisplayEdges"?: ParamValueSerializedTypeMap["boolean"];
  "lights--CADEdgesColor"?: ParamValueSerializedTypeMap["color"];
  "lights--CADEdgesColor-CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColor-CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColor-CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CADDisplayMeshes"?: ParamValueSerializedTypeMap["boolean"];
  "lights--CADMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "lights--CADMeshesColor-CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColor-CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColor-CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "lights--CSG"?: ParamValueSerializedTypeMap["folder"];
  "lights--CSGFacetAngle"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColor"?: ParamValueSerializedTypeMap["color"];
  "lights--CSGLinesColor-CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColor-CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColor-CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "lights--CSGMeshesColor-CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColor-CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColor-CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "lights--QUAD"?: ParamValueSerializedTypeMap["folder"];
  "lights--QUADTriangles"?: ParamValueSerializedTypeMap["boolean"];
  "lights--QUADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "lights--QUADWireframeColor"?: ParamValueSerializedTypeMap["color"];
  "lights--QUADWireframeColor-QUADWireframeColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--QUADWireframeColor-QUADWireframeColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--QUADWireframeColor-QUADWireframeColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--QUADWireframeColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--QUADWireframeColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--QUADWireframeColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--QUADCenter"?: ParamValueSerializedTypeMap["boolean"];
  "lights--QUADInnerRadius"?: ParamValueSerializedTypeMap["boolean"];
  "lights--QUADOuterRadius"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TET"?: ParamValueSerializedTypeMap["folder"];
  "lights--TetScale"?: ParamValueSerializedTypeMap["float"];
  "lights--TetDisplayOuterMesh"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplayTetMesh"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplayLines"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplaySharedFaces"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplayPoints"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplayCenter"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplaySphere"?: ParamValueSerializedTypeMap["boolean"];
  "lights-hemisphereLight1--skyColor"?: ParamValueSerializedTypeMap["color"];
  "lights-hemisphereLight1--skyColor-skyColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColor-skyColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColor-skyColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor"?: ParamValueSerializedTypeMap["color"];
  "lights-hemisphereLight1--groundColor-groundColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor-groundColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor-groundColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position"?: ParamValueSerializedTypeMap["vector3"];
  "lights-hemisphereLight1--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positionx"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positiony"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positionz"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--name"?: ParamValueSerializedTypeMap["string"];
  "lights-spotLight1--light"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--color"?: ParamValueSerializedTypeMap["color"];
  "lights-spotLight1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--angle"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--penumbra"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--decay"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--distance"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--helperSize"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--tmap"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--map"?: ParamValueSerializedTypeMap["node_path"];
  "lights-spotLight1--name"?: ParamValueSerializedTypeMap["string"];
  "lights-spotLight1--shadow"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--castShadow"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowUpdateOnNextRender"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowRes"?: ParamValueSerializedTypeMap["vector2"];
  "lights-spotLight1--shadowRes-shadowResx"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowRes-shadowResy"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowResx"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowResy"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowBias"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowNear"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowFar"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowRadius"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--volumetric"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--tvolumetric"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--volAttenuation"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--volAnglePower"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--raymarching"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--raymarchingPenumbra"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--raymarchingShadowBiasAngle"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--raymarchingShadowBiasDistance"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "lights-polarTransform1--center"?: ParamValueSerializedTypeMap["vector3"];
  "lights-polarTransform1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--longitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--latitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--depth"?: ParamValueSerializedTypeMap["float"];
  "lights-merge1--compact"?: ParamValueSerializedTypeMap["boolean"];
  "lights-merge1--preserveMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "lights-merge1--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--transform"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--t"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--tx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--ty"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--tz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--rx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--ry"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--rz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--scale"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera1--camera"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--controls"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--near"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--far"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--display"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--fov"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--frameMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--expectedAspectRatio"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--setMainCamera"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera1--layer"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--render"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--setScene"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--scene"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--setRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--renderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--setCSSRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--CSSRenderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--doPostProcess"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--postProcessNode"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--useWebXR"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--useAR"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--useVR"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-perspectiveCamera1--default"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1-perspectiveCamera1--fov"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--near"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--far"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--position"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1-perspectiveCamera1--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--positionx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--positiony"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--positionz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--rotation"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1-perspectiveCamera1--rotation-rotationx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--rotation-rotationy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--rotation-rotationz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--rotationx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--rotationy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--rotationz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-perspectiveCamera1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-perspectiveCamera1--name"?: ParamValueSerializedTypeMap["string"];
  "perspectiveCamera1-perspectiveCamera1--updateTransformFromCamera"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera1-perspectiveCamera1--PBR"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1-perspectiveCamera1--apertureBlades"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1-perspectiveCamera1--fStop"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--focusDistance"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--apertureRotation"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-perspectiveCamera1--anamorphicRatio"?: ParamValueSerializedTypeMap["float"];
}
